
Session 1
=========

pre-scripted .from_csv() commands
titles
len(titles)
titles.head()
titles.head(20)
titles.tail()
titles.info()
h = titles.head()
h.year
h['year']
h.year + 1000
h.year - 2000
h[h.year > 1960]
h[h.year > 1960 & h.year < 1970]
h[(h.year > 1960) & (h.year < 1970)]
len(h)
cast[['year', 'name']]
cast[['year']]
titles.sort(['title'])
titles.sort(['year'])
titles.sort(['year', 'title'])
titles.value_counts()

While doing exercises:

titles.year.nsmallest()
titles.year.nlargest()

Session 2
=========

v = titles.year.value_counts()
v.index
v.values
v.plot()  # whoops
s.sort_index()
v.sort_index().plot()

cast.info()
cast.index
cast.columns

c = cast.set_index(['title'])
c = cast.set_index(['title'])
c = cast.set_index(['title']).sort_index()
%%time c.loc['Sleuth']
%%time cast[cast.title == 'Sleuth']

c = cast.set_index(['title', 'year'])
c = cast.set_index(['title', 'year']).sort_index()
c.loc['Sleuth']
c.loc['Sleuth',1996]
c.loc['Sleuth',1996].sort('n')
c.loc[('Sleuth',1996),'character']
c.loc[('Sleuth',1996),('character','n')]
c.loc[('Sleuth',1996),('character','n')].sort('n')

c.loc[('Sleuth',1972)].sort('n').reset_index('title')
c.loc[('Sleuth',1972)].sort('n').reset_index('year')
c.loc[('Sleuth',1972)].sort('n').reset_index(['title', 'year'])
c.loc[('Sleuth',1972)].sort('n').reset_index()

c.loc['Sleuth'].index

Session 3
=========

TODO: show that .loc can take a range

c = cast
c.groupby('year').size()
c.groupby(['year', 'type']).size()

i = cast.set_index(['year', 'type']).sort_index()
i.groupby(level=[0,1]).size()

i = cast.set_index('name').sort_index()
? i.loc['Cary Grant',['year','n']].groupby('year').first()
? i.loc['Cary Grant',['year','n']].groupby('year').last()
i.loc['Cary Grant',['year','n']].groupby('year').mean().plot(kind='bar')
i.loc['Cary Grant',['year','n']].groupby('year').max().plot(kind='bar')
i.loc['Cary Grant',['year','n']].groupby('year').min().plot(kind='bar')
i.loc['Cary Grant',['year','n']].groupby('year').agg(['min', 'mean', 'max'])
a = i.loc['Cary Grant',['year','n']].groupby('year').agg(['min', 'mean', 'max'])
a.loc[:1942].plot(kind='area', stacked=False)

Session 4
=========

Indexing and grouping has been moving our data left.
"Unstacking" moves it up, to columns!

c = cast
#c = c[c.year // 10 == 198]
c = c[c.n <= 3]
c = c.groupby(['year', 'type', 'n']).size()
c = c.unstack(1)
Detour:
  c.swaplevel(0,1).loc[1].plot(ylim=0)
  c.swaplevel(0,1).loc[1].plot(ylim=0, kind='area')
f = c.actor / (c.actor + c.actress)
f = f.unstack()
f.plot(ylim=[0,1])

aa = cast[['year', 'type']].groupby(['year', 'type']).size()
aa = aa.loc[:2014].unstack()
aa.head()

aa.plot()
aa.plot(kind='area')

f = aa.actor / (aa.actor + aa.actress)
f.plot(ylim=[0,1], kind='area')

# Show following maneuver for a real final unstack()?
#
# pd.DataFrame({'row': df.unstack().unstack()}).T



most #1 roles

Session 5
=========

dates?

Session 6
=========

s.dt.*
s.str.*

.isnull()
.notnull()
.dropna()
.fillna()
