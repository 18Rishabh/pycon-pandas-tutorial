
Session 1
=========

pre-scripted .from_csv() commands
titles

Length, Head, Tail

len(titles)
titles.head() and .head(20)
titles.tail() and .tail(10)

Filtering

h['year'] or h.year

h.year + 1000
h.year - 2000

h.year > 1960
h[h.year > 1960]
h[h.year > 1960 & h.year < 1970]
h[(h.year > 1960) & (h.year < 1970)]
h[h.title == '...']

Sorting

titles.sort(['title'])
titles.sort(['year'])
titles.sort(['year', 'title'])

Session 2
=========

Operators

h.str.len()
h.str.startswith(s)
h.str.extract(RE)

Aggregation

.value_counts().plot()  whoops!
.index
.value_counts().sort_index().plot(kind='bar')

c = cast
c = c[c.title == 'Hamlet']
c.plot(x='year', y='n', kind='scatter')

# true_false.sum() ?
# cast.columns ?
# v.values

# h[['year', 'name']]
# h[['year']]

Session 3
=========

Indexes

c = cast.set_index(['title'])
c = cast.set_index(['title'])
c = cast.set_index(['title']).sort_index()
%%time c.loc['Sleuth']
%%time cast[cast.title == 'Sleuth']

c = cast.set_index(['title', 'year'])
c = cast.set_index(['title', 'year']).sort_index()
c.loc['Sleuth']
c.loc['Sleuth',1996]
c.loc['Sleuth',1996].sort('n')
c.loc[('Sleuth',1996),'character']
c.loc[('Sleuth',1996),('character','n')]
c.loc[('Sleuth',1996),('character','n')].sort('n')

c.loc[('Sleuth',1972)].sort('n').reset_index('title')
c.loc[('Sleuth',1972)].sort('n').reset_index('year')
c.loc[('Sleuth',1972)].sort('n').reset_index(['title', 'year'])
c.loc[('Sleuth',1972)].sort('n').reset_index()

c.loc['Sleuth'].index

Q: Why index? A1: Speed!

Do Star Wars!

Q: Why index? A2: Groupby!

c = cast
c.groupby('year').size()
c.groupby(['year', 'type']).size()

i = cast.set_index(['year', 'type']).sort_index()
i.groupby(level=[0,1]).size()

# Need a 3-level groupby!

# TODO: show groupby(expression) here!

# Different ways of viewing George Clooney:

c = cast
c = c[c.name == 'George Clooney']
c.groupby(['title', 'year', 'character']).size()

c = cast
c = c[c.name == 'George Clooney']
c.groupby(['character', 'title', 'year']).size()

c = cast
c = c[c.name == 'George Clooney']
c.groupby(['character']).size()

# How many times has he had two roles in the same film?

c = cast
c = c[c.name == 'George Clooney']
c = c.groupby(['year', 'title']).size()
c[c > 1]

Session 4
=========

i.loc['Cary Grant',['year','n']].groupby('year').agg(['min', 'mean', 'max'])
a = i.loc['Cary Grant',['year','n']].groupby('year').agg(['min', 'mean', 'max'])

c = cast
#c = c[c.year // 10 == 198]
c = c[c.n <= 3]
c = c.groupby(['year', 'type', 'n']).size()
c = c.unstack(1)
Detour:
  c.swaplevel(0,1).loc[1].plot(ylim=0)
  c.swaplevel(0,1).loc[1].plot(ylim=0, kind='area')
f = c.actor / (c.actor + c.actress)
f = f.unstack()
f.plot(ylim=[0,1])

aa = cast[['year', 'type']].groupby(['year', 'type']).size()
aa = aa.loc[:2014].unstack()
aa.head()

aa.plot()
aa.plot(kind='area')

f = aa.actor / (aa.actor + aa.actress)
f.plot(ylim=[0,1], kind='area')

# Show following maneuver for a real final unstack()?
#
# pd.DataFrame({'row': df.unstack().unstack()}).T

Indexing and grouping has been moving our data left.
"Unstacking" moves it up, to columns!

# in example: do it for actor?
# unstack actor/actress and plot

Session 5
=========

.join()

.dt.*

reindex? or what? yeah.
.isnull()
.notnull()
.dropna()
.fillna()

broadcast df['foo'] = 9

# Rank the actors of Star Wars by the number
# of subsq films.



Session 6
=========

.info()

Pivot

r = release_dates
r = r[r.title.str.startswith('Star Wars: Episode')]
r = r[r.country.str.startswith('U')]
r.pivot('title', 'country', 'date')

which is the same as

r.set_index(['title', 'country'])[['date']].unstack()

.rename(columns={...})
.concat(df)

(who had which co-stars how often)
(what pairs of co-stars have appeared the most often together)
